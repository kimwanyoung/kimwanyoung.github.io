<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-10-12T15:26:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">완영 불로그</title><subtitle>kimwanyoung blog
</subtitle><author><name>kimwanyoung</name></author><entry><title type="html">COUNT(*) vs COUNT(column_name)</title><link href="http://localhost:4000/sql/2025-10-06-count-star-vs-count-column.html" rel="alternate" type="text/html" title="COUNT(*) vs COUNT(column_name)" /><published>2025-10-06T00:00:00+09:00</published><updated>2025-10-06T00:00:00+09:00</updated><id>http://localhost:4000/sql/count-star-vs-count-column</id><content type="html" xml:base="http://localhost:4000/sql/2025-10-06-count-star-vs-count-column.html"><![CDATA[<p>SQL에서 데이터 개수를 세는 <code class="language-plaintext highlighter-rouge">COUNT</code> 함수는 매우 자주 사용되지만, <code class="language-plaintext highlighter-rouge">COUNT(*)</code>와 <code class="language-plaintext highlighter-rouge">COUNT(column_name)</code>의 차이를 정확히 이해하지 못했었다. 이번에 둘의 차이를 비교하고 확실히 이해하고 넘어가보고자 한다.</p>

<hr />

<h2 id="기본-개념">기본 개념</h2>

<h3 id="-count">📝 COUNT(*)</h3>
<ul>
  <li><strong>행(Row)의 개수를 계산</strong>한다.</li>
  <li>행이 존재하기만 하면 <code class="language-plaintext highlighter-rouge">NULL</code>이 있더라도 포함된다.</li>
  <li>즉, <strong>전체 행 수</strong>를 반환한다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>email</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td><a href="mailto:a@a.com">a@a.com</a></td>
      <td>completed</td>
    </tr>
    <tr>
      <td>2</td>
      <td>NULL</td>
      <td>pending</td>
    </tr>
    <tr>
      <td>3</td>
      <td><a href="mailto:b@b.com">b@b.com</a></td>
      <td>completed</td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">orders</span><span class="p">;</span>
<span class="c1">-- COUNT(*) = 3 (모든 행 포함)</span>
</code></pre></div></div>

<h3 id="-countcolumn_name">📝 COUNT(column_name)</h3>
<ul>
  <li>해당 컬럼이 NULL이 아닌 행만 카운트한다.</li>
  <li>즉, <strong>해당 컬럼이 존재하는 행의 수</strong>를 반환한다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>email</th>
      <th>status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td><a href="mailto:a@a.com">a@a.com</a></td>
      <td>completed</td>
    </tr>
    <tr>
      <td>2</td>
      <td>NULL</td>
      <td>pending</td>
    </tr>
    <tr>
      <td>3</td>
      <td><a href="mailto:b@b.com">b@b.com</a></td>
      <td>completed</td>
    </tr>
  </tbody>
</table>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">orders</span><span class="p">;</span>
<span class="c1">-- COUNT(email) = 2 (NULL 제외)</span>
</code></pre></div></div>

<h3 id="-count-동작-방식">📝 COUNT(*) 동작 방식</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">orders</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="s1">'completed'</span><span class="p">;</span>
</code></pre></div></div>

<ol>
  <li><strong>인덱스 스캔 최적화</strong>: 대부분의 DBMS는 가장 작은 인덱스를 사용하여 행 개수를 센다.</li>
  <li><strong>데이터 페이지 접근 최소화</strong>: 실제 테이블 데이터에 접근하지 않고, 인덱스만으로 카운트.</li>
  <li><strong>NULL 체크 불필요</strong>: 행의 존재만 확인하면 되므로 컬럼 값 검사를 생략한다.</li>
</ol>

<h3 id="-countcolumn_name-동작-방식">📝 COUNT(column_name) 동작 방식</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">orders</span> <span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="s1">'completed'</span><span class="p">;</span>
</code></pre></div></div>

<ol>
  <li><strong>컬럼 값 접근 필수</strong>: 해당 컬럼이 NULL인지 확인해야 한다.</li>
  <li><strong>인덱스 활용 조건</strong>: <code class="language-plaintext highlighter-rouge">email</code> 컬럼에 인덱스가 있어야 효율적입니다.</li>
  <li><strong>데이터 읽기 오버헤드</strong>: NULL 체크를 위해 실제 컬럼 값을 읽어야 한다.</li>
</ol>

<hr />

<h2 id="성능-차이">성능 차이</h2>

<h3 id="innodb-mysql-기준">InnoDB (MySQL) 기준</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- 1. COUNT(*) - 가장 빠름</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">large_table</span><span class="p">;</span>
<span class="c1">-- Secondary Index 사용, 데이터 페이지 접근 X</span>

<span class="c1">-- 2. COUNT(primary_key) - 빠름</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">large_table</span><span class="p">;</span>
<span class="c1">-- Primary Key는 NOT NULL 보장, 인덱스 사용</span>

<span class="c1">-- 3. COUNT(nullable_column) - 느림</span>
<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">large_table</span><span class="p">;</span>
<span class="c1">-- NULL 체크 필요, 컬럼 값 읽기 필요</span>
</code></pre></div></div>
<hr />

<h3 id="-count-where-column_name-is-not-null-vs-countcolumn_name">🔍 COUNT(*) WHERE column_name IS NOT NULL vs COUNT(column_name)</h3>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> 
<span class="k">FROM</span> <span class="n">orders</span> 
<span class="k">WHERE</span> <span class="n">email</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>

<span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> 
<span class="k">FROM</span> <span class="n">orders</span><span class="p">;</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>비교 항목</th>
      <th>COUNT(*) + WHERE</th>
      <th>COUNT(column_name)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>필터 처리</td>
      <td>WHERE 절에서 NULL 제거 후 전체 행 카운트</td>
      <td>COUNT 내부에서 NULL 제외</td>
    </tr>
    <tr>
      <td>실행 계획</td>
      <td>옵티마이저가 WHERE 조건을 먼저 필터링</td>
      <td>함수 내부에서 조건 처리</td>
    </tr>
    <tr>
      <td>인덱스(email) 유무</td>
      <td>인덱스 있으면 동일 성능</td>
      <td>인덱스 없으면 더 느림</td>
    </tr>
    <tr>
      <td>결과</td>
      <td>동일</td>
      <td>동일</td>
    </tr>
  </tbody>
</table>

<p>즉, 결과는 동일하지만, 인덱스 사용 여부에 따라 성능이 달라진다.</p>

<p>인덱스가 걸려 있으면 두 쿼리 모두 효율적으로 수행됨</p>

<p>인덱스가 없을 경우, COUNT(*) WHERE column_name IS NOT NULL이 약간 더 빠를 수 있음
(WHERE 필터링 시 옵티마이저가 범위 조건으로 처리하기 때문)</p>

<h3 id="정리">정리</h3>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>설명</th>
      <th>특징</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">COUNT(*)</code></td>
      <td>전체 행 수 계산</td>
      <td>가장 빠름, NULL 포함</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">COUNT(column)</code></td>
      <td>특정 컬럼의 NULL 제외 행 수 계산</td>
      <td>컬럼 접근 필요</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">COUNT(*) WHERE column IS NOT NULL</code></td>
      <td>결과는 <code class="language-plaintext highlighter-rouge">COUNT(column)</code>과 동일</td>
      <td>WHERE 절에서 NULL 필터링</td>
    </tr>
  </tbody>
</table>

<h3 id="-결론">✅ 결론</h3>
<ul>
  <li>전체 행 수를 셀 때는 COUNT(*)</li>
  <li>특정 컬럼의 값이 존재하는 행만 셀 때는 COUNT(column)</li>
  <li>하지만, 특정 컬럼에 인덱스를 강제하는 COUNT(column_name)을 굳이 사용해야할까 생각이 들기도 한다. 그냥 COUNT(*) WHERE column_name IS NOT NULL을 사용해도 되지 않을까?</li>
</ul>]]></content><author><name>kimwanyoung</name></author><category term="SQL" /><summary type="html"><![CDATA[SQL에서 데이터 개수를 세는 COUNT 함수는 매우 자주 사용되지만, COUNT(*)와 COUNT(column_name)의 차이를 정확히 이해하지 못했었다. 이번에 둘의 차이를 비교하고 확실히 이해하고 넘어가보고자 한다.]]></summary></entry></feed>